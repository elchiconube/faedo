---
import { SITE_NAME, SITE_LOCALE, SITE_IMAGE } from '../consts';

interface Props {
  title: string;
  description: string;
  image?: string;
  url?: string;
  type?: 'website' | 'article' | 'blog' | 'place';
  jsonLd?: Record<string, any> | Record<string, any>[];
}
const { title, description, image, url, type = 'website', jsonLd } = Astro.props as Props;
const canonical = (url ?? new URL(Astro.url.pathname, Astro.site)).toString();
const ogImage = image ? new URL(image, Astro.site).toString() : new URL(SITE_IMAGE, Astro.site).toString();
---
<fragment>
  <title>{title}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={canonical} />
  <link rel="alternate" hreflang={SITE_LOCALE} href={canonical} />
  <meta property="og:site_name" content={SITE_NAME} />
  <meta property="og:type" content={type} />
  <meta property="og:url" content={canonical} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={ogImage} />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:url" content={canonical} />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />
  <meta name="twitter:image" content={ogImage} />
  {jsonLd && (
    <script type="application/ld+json" set:html={JSON.stringify(Array.isArray(jsonLd) ? { '@context': 'https://schema.org', '@graph': jsonLd } : jsonLd)} />
  )}
</fragment>

